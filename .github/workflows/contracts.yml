name: Smart Contracts CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'contracts/**'
      - '.github/workflows/contracts.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'contracts/**'

env:
  FOUNDRY_PROFILE: ci

jobs:
  test:
    name: Test Contracts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run forge build
        run: |
          cd contracts
          forge --version
          forge build --sizes
        id: build

      - name: Run forge tests
        run: |
          cd contracts
          forge test -vvv
        id: test

      - name: Generate gas report
        run: |
          cd contracts
          forge test --gas-report > gas-report.txt
          echo "## Gas Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat gas-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Run coverage
        run: |
          cd contracts
          forge coverage --report lcov
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./contracts/lcov.info
          flags: contracts
          name: contracts-coverage

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Slither
        run: |
          pip install slither-analyzer
          
      - name: Run Slither
        run: |
          cd contracts
          slither . --print human-summary || true
          
      - name: Install Mythril
        run: |
          pip install mythril
          
      - name: Run Mythril
        run: |
          cd contracts
          myth analyze src/*.sol --solv 0.8.19 || true
        continue-on-error: true

  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: testnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Deploy contracts
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          RPC_URL: ${{ secrets.TESTNET_RPC_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          EMERGENCY_MULTISIG: ${{ secrets.TESTNET_EMERGENCY_MULTISIG }}
          TEAM_LEAD: ${{ secrets.TESTNET_TEAM_LEAD }}
        run: |
          cd contracts
          
          # Deploy main contracts
          forge script script/Deploy.s.sol:Deploy \
            --rpc-url $RPC_URL \
            --broadcast \
            --verify \
            -vvvv
            
          # Deploy governance contracts
          forge script script/DeployGovernance.s.sol:DeployGovernance \
            --rpc-url $RPC_URL \
            --broadcast \
            --verify \
            -vvvv

      - name: Save deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-artifacts
          path: |
            contracts/broadcast/
            contracts/deployments/

  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: mainnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Deploy contracts
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          EMERGENCY_MULTISIG: ${{ secrets.MAINNET_EMERGENCY_MULTISIG }}
          TEAM_LEAD: ${{ secrets.MAINNET_TEAM_LEAD }}
        run: |
          cd contracts
          
          # Deploy with extra caution on mainnet
          forge script script/Deploy.s.sol:Deploy \
            --rpc-url $RPC_URL \
            --broadcast \
            --verify \
            --slow \
            -vvvv
            
          # Deploy governance contracts
          forge script script/DeployGovernance.s.sol:DeployGovernance \
            --rpc-url $RPC_URL \
            --broadcast \
            --verify \
            --slow \
            -vvvv

      - name: Save deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mainnet-deployment-artifacts
          path: |
            contracts/broadcast/
            contracts/deployments/

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Mainnet deployment completed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()