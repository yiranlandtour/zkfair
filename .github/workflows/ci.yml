name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  SOLIDITY_VERSION: '0.8.19'

jobs:
  # Smart Contract Tests
  smart-contracts:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: |
          cd contracts
          forge install

      - name: Run tests
        run: |
          cd contracts
          forge test -vvv

      - name: Check gas snapshots
        run: |
          cd contracts
          forge snapshot --check

      - name: Run coverage
        run: |
          cd contracts
          forge coverage --report lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./contracts/lcov.info
          flags: smart-contracts

  # Backend Tests
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: zkfair
          POSTGRES_PASSWORD: zkfair123
          POSTGRES_DB: zkfair_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Generate Prisma client
        run: |
          cd backend
          npm run prisma:generate

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://zkfair:zkfair123@localhost:5432/zkfair_test
        run: |
          cd backend
          npm run prisma:migrate:test

      - name: Run linting
        run: |
          cd backend
          npm run lint

      - name: Run tests
        env:
          DATABASE_URL: postgresql://zkfair:zkfair123@localhost:5432/zkfair_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: |
          cd backend
          npm run test:ci

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend

  # Frontend Tests
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        run: |
          cd frontend
          npm run test:ci -- --coverage

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend

  # SDK Tests
  sdk:
    name: SDK Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: sdk/package-lock.json

      - name: Install dependencies
        run: |
          cd sdk
          npm ci

      - name: Run tests
        run: |
          cd sdk
          npm test

      - name: Build SDK
        run: |
          cd sdk
          npm run build

  # Security Checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Slither
        uses: crytic/slither-action@v0.3.0
        with:
          target: contracts/
          slither-args: --exclude-dependencies

      - name: Run npm audit
        run: |
          for dir in backend frontend sdk bundler; do
            echo "Checking $dir..."
            cd $dir
            npm audit --production
            cd ..
          done

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [smart-contracts, backend, frontend]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            zkfair/backend:latest
            zkfair/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            zkfair/frontend:latest
            zkfair/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push bundler
        uses: docker/build-push-action@v4
        with:
          context: ./bundler
          push: true
          tags: |
            zkfair/bundler:latest
            zkfair/bundler:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update task definitions
          aws ecs update-service \
            --cluster zkfair-staging \
            --service backend \
            --force-new-deployment

          aws ecs update-service \
            --cluster zkfair-staging \
            --service frontend \
            --force-new-deployment

          aws ecs update-service \
            --cluster zkfair-staging \
            --service bundler \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster zkfair-staging \
            --services backend frontend bundler

      - name: Run smoke tests
        run: |
          npm install -g newman
          newman run tests/postman/smoke-tests.json \
            --environment tests/postman/staging.json

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy contracts
        run: |
          echo "Contract deployment would happen here"
          # forge script script/Deploy.s.sol --rpc-url ${{ secrets.MAINNET_RPC_URL }} --broadcast

      - name: Deploy services
        run: |
          # Update task definitions with new image tags
          ./scripts/deploy-production.sh ${{ github.sha }}

      - name: Update monitoring
        run: |
          # Update Grafana dashboards
          # Update alert rules
          echo "Monitoring update would happen here"

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed for commit ${{ github.sha }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()