generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserOperation {
  id               String   @id @default(cuid())
  userOpHash       String   @unique
  sender           String
  paymaster        String?
  nonce            String
  success          Boolean
  actualGasCost    String
  actualGasUsed    String
  transactionHash  String
  blockNumber      Int
  timestamp        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([sender])
  @@index([transactionHash])
  @@index([blockNumber])
  @@index([timestamp])
}

model SmartWallet {
  id              String   @id @default(cuid())
  address         String   @unique
  owner           String
  implementation  String
  salt            String
  deploymentTx    String?
  isDeployed      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String?

  user            User?    @relation(fields: [userId], references: [id])

  @@index([owner])
  @@index([userId])
}

model Transaction {
  id              String   @id @default(cuid())
  hash            String   @unique
  from            String
  to              String
  value           String
  data            String?
  gasUsed         String
  gasPrice        String
  nonce           Int
  blockNumber     Int
  blockTimestamp  DateTime
  status          Boolean
  createdAt       DateTime @default(now())
  userId          String?

  user            User?    @relation(fields: [userId], references: [id])

  @@index([from])
  @@index([to])
  @@index([blockNumber])
  @@index([userId])
}

model PaymasterTransaction {
  id              String   @id @default(cuid())
  userOpHash      String   @unique
  paymaster       String
  token           String
  tokenAmount     String
  ethCost         String
  exchangeRate    String
  user            String
  timestamp       DateTime
  createdAt       DateTime @default(now())

  @@index([paymaster])
  @@index([user])
  @@index([token])
  @@index([timestamp])
}

model SystemStats {
  id                    String   @id @default(cuid())
  totalUserOps          Int      @default(0)
  totalSmartWallets     Int      @default(0)
  totalGasSponsored     String   @default("0")
  totalTokensCollected  Json     @default("{}")
  lastBlockProcessed    Int      @default(0)
  updatedAt             DateTime @updatedAt
}

model User {
  id           String    @id @default(cuid())
  address      String    @unique
  role         String    @default("user")
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  wallets      SmartWallet[]
  transactions Transaction[]
  refreshTokens RefreshToken[]
  apiKeys      ApiKey[]
  notificationPreferences    UserNotificationPreference?
  notifications              Notification[]
  notificationLogs           NotificationLog[]

  @@index([address])
}

model AuthNonce {
  id        String   @id @default(cuid())
  address   String   @unique
  nonce     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([address])
  @@index([expiresAt])
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String
  key        String    @unique
  userId     String
  expiresAt  DateTime
  isActive   Boolean   @default(true)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
  @@index([isActive])
}

model UserNotificationPreference {
  userId       String   @id
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channels     Json     // Channel preferences (email, sms, push, etc.)
  categories   Json     // Category preferences (transactions, security, etc.)
  quietHours   Json?    // Quiet hours settings
  language     String   @default("en")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         String
  title        String
  body         String
  data         Json?
  read         Boolean   @default(false)
  readAt       DateTime?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  
  @@index([userId, read])
  @@index([userId, createdAt])
}

model NotificationLog {
  id           String    @id @default(cuid())
  eventId      String
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  type         String
  channel      String
  status       String    // queued, sent, delivered, failed, bounced
  messageId    String?
  content      Json?
  metadata     Json?
  deliveredAt  DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  error        String?
  createdAt    DateTime  @default(now())
  
  @@index([eventId])
  @@index([userId])
  @@index([type])
  @@index([channel])
  @@index([status])
  @@index([createdAt])
}

model NotificationTemplate {
  id           String    @id @default(cuid())
  name         String    @unique
  type         String
  channel      String
  subject      Json?     // Localized subjects
  body         Json      // Localized body templates
  metadata     Json?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@unique([type, channel])
  @@index([type])
  @@index([channel])
}